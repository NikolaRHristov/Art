{"version":3,"file":"Noise.BhTR9n8V.js","sources":["../../Source/Function/Noise.tsx"],"sourcesContent":["import { createSignal, onMount, onCleanup } from \"solid-js\";\n\nexport default (props: {\n\t// biome-ignore lint/suspicious/noExplicitAny: \n\ttext: any;\n\tfontSize?: 48 | undefined;\n\twidth?: 800 | undefined;\n\theight?: 200 | undefined;\n}) => {\n\tconst { text, fontSize = 48, width = 800, height = 200 } = props;\n\n\t// biome-ignore lint/suspicious/noExplicitAny: <explanation>\n\tlet canvasRef: any;\n\n\tconst [, setFrame] = createSignal(0);\n\n\tonMount(() => {\n\t\tconst canvas = canvasRef;\n\n\t\tif (!canvas) return;\n\n\t\tconst context = canvas.getContext(\"2d\");\n\n\t\tlet animationFrameId: number;\n\n\t\tconst render = () => {\n\t\t\tcontext.clearRect(0, 0, width, height);\n\n\t\t\t// Set font properties\n\t\t\tcontext.font = `${fontSize}px Arial`;\n\n\t\t\tcontext.textBaseline = \"middle\";\n\n\t\t\tcontext.textAlign = \"center\";\n\n\t\t\t// Create a path for the text\n\t\t\tcontext.fillStyle = \"black\";\n\n\t\t\tcontext.fillText(text, width / 2, height / 2);\n\n\t\t\t// Get image data\n\t\t\tconst imageData = context.getImageData(0, 0, width, height);\n\n\t\t\tconst data = imageData.data;\n\n\t\t\t// Apply noise function\n\t\t\tfor (let i = 0; i < data.length; i += 4) {\n\t\t\t\tif (data[i + 3] > 0) {\n\t\t\t\t\t// Only color non-transparent pixels\n\t\t\t\t\tdata[i] = Math.random() * 255; // Red\n\t\t\t\t\tdata[i + 1] = Math.random() * 255; // Green\n\t\t\t\t\tdata[i + 2] = Math.random() * 255; // Blue\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Put the modified image data back\n\t\t\tcontext.putImageData(imageData, 0, 0);\n\n\t\t\t// Schedule the next frame\n\t\t\tanimationFrameId = requestAnimationFrame(() => {\n\t\t\t\tsetFrame((prev) => prev + 1); // Trigger a re-render\n\t\t\t});\n\t\t};\n\n\t\trender();\n\n\t\tonCleanup(() => {\n\t\t\tcancelAnimationFrame(animationFrameId);\n\t\t});\n\t});\n\n\treturn (\n\t\t<canvas\n\t\t\tref={canvasRef}\n\t\t\twidth={width}\n\t\t\theight={height}\n\t\t\tstyle={{ width: `${width}px`, height: `${height}px` }}\n\t\t/>\n\t);\n};\n"],"names":["Noise","props","text","fontSize","width","height","canvasRef","setFrame","createSignal","onMount","canvas","context","getContext","animationFrameId","render","clearRect","font","textBaseline","textAlign","fillStyle","fillText","imageData","getImageData","data","i","length","Math","random","putImageData","requestAnimationFrame","prev","onCleanup","cancelAnimationFrame","_el$","_$getNextElement","_tmpl$","_ref$","_$use","style","setProperty","removeProperty"],"mappings":"oGAEA,MAAeA,EAACC,GAMV,CACC,KAAA,CAAEC,KAAAA,EAAMC,SAAAA,EAAW,GAAIC,MAAAA,EAAQ,IAAKC,OAAAA,EAAS,GAAQJ,EAAAA,EAGvDK,IAAAA,EAEJ,KAAM,EAAGC,CAAQ,EAAIC,EAAa,CAAC,EAEnCC,OAAAA,EAAQ,IAAM,CACb,MAAMC,EAASJ,EAEf,GAAI,CAACI,EAAQ,OAEPC,MAAAA,EAAUD,EAAOE,WAAW,IAAI,EAElCC,IAAAA,GAEWC,IAAM,CACpBH,EAAQI,UAAU,EAAG,EAAGX,EAAOC,CAAM,EAG7BW,EAAAA,KAAO,GAAGb,CAAQ,WAE1BQ,EAAQM,aAAe,SAEvBN,EAAQO,UAAY,SAGpBP,EAAQQ,UAAY,QAEpBR,EAAQS,SAASlB,EAAME,EAAQ,EAAGC,EAAS,CAAC,EAG5C,MAAMgB,EAAYV,EAAQW,aAAa,EAAG,EAAGlB,EAAOC,CAAM,EAEpDkB,EAAOF,EAAUE,KAGvB,QAASC,EAAI,EAAGA,EAAID,EAAKE,OAAQD,GAAK,EACjCD,EAAKC,EAAI,CAAC,EAAI,IAEjBD,EAAKC,CAAC,EAAIE,KAAKC,OAAAA,EAAW,IAC1BJ,EAAKC,EAAI,CAAC,EAAIE,KAAKC,OAAW,EAAA,IAC9BJ,EAAKC,EAAI,CAAC,EAAIE,KAAKC,OAAW,EAAA,KAKxBC,EAAAA,aAAaP,EAAW,EAAG,CAAC,EAGpCR,EAAmBgB,sBAAsB,IAAM,CACpCC,EAAAA,GAASA,EAAO,CAAC,CAAA,CAC3B,CAAA,KAKFC,EAAU,IAAM,CACfC,qBAAqBnB,CAAgB,CAAA,CACrC,CAAA,CACD,GAED,IAAA,CAAAoB,IAAAA,EAAAC,EAAAC,CAAA,EAAAC,EAEO9B,EAAS,cAAA8B,GAAAC,WAAAA,EAAAD,EAAAH,CAAA,EAAT3B,EAAS2B,EAAAA,EAAAA,EAAA,QACP7B,CAAK,EAAA6B,EAAAA,EAAA,SACJ5B,CAAM,EACE,GAAGD,CAAK,MAAI,KAAA6B,EAAAK,MAAAC,YAAZ,QAAA,GAAGnC,CAAK,IAAI,EAAA6B,EAAAK,MAAAE,eAAA,OAAA,EAAU,GAAGnC,CAAM,MAAI,KAAA4B,EAAAK,MAAAC,YAAb,SAAA,GAAGlC,CAAM,IAAI,EAAA4B,EAAAK,MAAAE,eAAA,QAAA,EAAAP,CAAAA,IAGtD"}