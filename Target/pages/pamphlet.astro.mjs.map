{"version":3,"file":"pamphlet.astro.mjs","sources":["../../Source/pages/Pamphlet.astro"],"sourcesContent":["<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>3-Part Pamphlet with Three.js</title>\r\n    <style>\r\n        body { margin: 0; background-color: white; }\r\n        canvas { display: block; }\r\n    </style>\r\n</head>\r\n<body>\r\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js\"></script>\r\n    <script>\r\n        // Set up the scene, camera, and renderer\r\n        const scene = new THREE.Scene();\r\n        scene.background = new THREE.Color(0xffffff);\r\n        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\r\n        const renderer = new THREE.WebGLRenderer({ antialias: true });\r\n        renderer.setSize(window.innerWidth, window.innerHeight);\r\n        renderer.shadowMap.enabled = true;\r\n        renderer.shadowMap.type = THREE.PCFSoftShadowMap;\r\n        document.body.appendChild(renderer.domElement);\r\n\r\n        // Create pamphlet parts\r\n        const createPamphletPart = (position, rotation) => {\r\n            const geometry = new THREE.BoxGeometry(2, 3, 0.1);\r\n            const material = new THREE.MeshPhongMaterial({ color: 0xe0e0e0 });\r\n            const part = new THREE.Mesh(geometry, material);\r\n            part.position.set(position.x, position.y, position.z);\r\n            part.rotation.set(rotation.x, rotation.y, rotation.z);\r\n            part.castShadow = true;\r\n            part.receiveShadow = true;\r\n            return part;\r\n        };\r\n\r\n        const leftPart = createPamphletPart({ x: -1.9, y: 0, z: 0 }, { x: 0, y: Math.PI / 6, z: 0 });\r\n        const middlePart = createPamphletPart({ x: 0, y: 0, z: 0 }, { x: 0, y: 0, z: 0 });\r\n        const rightPart = createPamphletPart({ x: 1.9, y: 0, z: 0 }, { x: 0, y: -Math.PI / 6, z: 0 });\r\n\r\n        // Add parts to the scene\r\n        scene.add(leftPart);\r\n        scene.add(middlePart);\r\n        scene.add(rightPart);\r\n\r\n        // Add lighting\r\n        const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\r\n        scene.add(ambientLight);\r\n\r\n        const directionalLight = new THREE.DirectionalLight(0xffffff, 0.5);\r\n        directionalLight.position.set(5, 5, 5);\r\n        directionalLight.castShadow = true;\r\n        directionalLight.shadow.mapSize.width = 1024;\r\n        directionalLight.shadow.mapSize.height = 1024;\r\n        directionalLight.shadow.camera.near = 1;\r\n        directionalLight.shadow.camera.far = 20;\r\n        scene.add(directionalLight);\r\n\r\n        // Add ground plane for shadow\r\n        const planeGeometry = new THREE.PlaneGeometry(10, 10);\r\n        const planeMaterial = new THREE.ShadowMaterial({ opacity: 0.3 });\r\n        const plane = new THREE.Mesh(planeGeometry, planeMaterial);\r\n        plane.rotation.x = -Math.PI / 2;\r\n        plane.position.y = -1.5;\r\n        plane.receiveShadow = true;\r\n        scene.add(plane);\r\n\r\n        // Position camera\r\n        camera.position.set(0, 0, 5);\r\n\r\n        // Raycaster for detecting mouse movements\r\n        const raycaster = new THREE.Raycaster();\r\n        const mouse = new THREE.Vector2();\r\n\r\n        // Render function\r\n        function render() {\r\n            renderer.render(scene, camera);\r\n        }\r\n\r\n        // Animation loop\r\n        function animate() {\r\n            requestAnimationFrame(animate);\r\n            render();\r\n        }\r\n\r\n        animate();\r\n\r\n        // Handle window resizing\r\n        window.addEventListener('resize', () => {\r\n            camera.aspect = window.innerWidth / window.innerHeight;\r\n            camera.updateProjectionMatrix();\r\n            renderer.setSize(window.innerWidth, window.innerHeight);\r\n            render();\r\n        });\r\n\r\n        // Handle mouse movement\r\n        window.addEventListener('mousemove', (event) => {\r\n            mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\r\n            mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\r\n\r\n            raycaster.setFromCamera(mouse, camera);\r\n\r\n            const intersects = raycaster.intersectObjects([leftPart, middlePart, rightPart]);\r\n\r\n            if (intersects.length > 0) {\r\n                const intersectedObject = intersects[0].object;\r\n\r\n                if (intersectedObject === leftPart) {\r\n                    leftPart.rotation.y = Math.PI / 3;\r\n                } else {\r\n                    leftPart.rotation.y = Math.PI / 6;\r\n                }\r\n\r\n                if (intersectedObject === rightPart) {\r\n                    rightPart.rotation.y = -Math.PI / 3;\r\n                } else {\r\n                    rightPart.rotation.y = -Math.PI / 6;\r\n                }\r\n            } else {\r\n                leftPart.rotation.y = Math.PI / 6;\r\n                rightPart.rotation.y = -Math.PI / 6;\r\n            }\r\n        });\r\n    </script>\r\n</body>\r\n</html>\r\n"],"names":["$$renderHead","$$renderScript"],"mappings":";;;;;;;iNAAAA,UAAA,CAAA,CAAA,CAAA,uCAAA,EAYKC,YAAA,CAAA,QAAA,EAAA,2GAAA,CAAA,CACA,CAAA,EAAAA,YAAA,CAAA,QAAA,EAAA,2GAAA,CAAA,CAAA,gBAAA,CAAA,CAAA;AAbL,CAAA,EAAA,2EAAA,KAAA,CAAA,CAAA,CAAA;;;;;;;;;;;;;;;;"}